The std namespace

When C++ was originally designed, all of the identifiers in the C++ standard library (including std::cin and std::cout) 
were available to be used without the std:: prefix (they were part of the global namespace).
However, this meant that any identifier in the standard library could potentially conflict with any name you 
picked for your own identifiers (also defined in the global namespace). Code that was working might suddenly 
have a naming conflict when you #included a new file from the standard library. Or worse, programs that would 
compile under one version of C++ might not compile under a future version of C++, as new identifiers introduced 
into the standard library could have a naming conflict with already written code. So C++ moved all of the functionality 
in the standard library into a namespace named “std” (short for standard).

It turns out that std::cout‘s name isn’t really std::cout. It’s actually just cout, and std is the name
of the namespace that identifier cout is part of. Because cout is defined in the std namespace, the name cout 
won’t conflict with any objects or functions named cout that we create in the global namespace.
